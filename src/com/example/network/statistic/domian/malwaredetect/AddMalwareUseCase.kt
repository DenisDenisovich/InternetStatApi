package com.example.network.statistic.domian.malwaredetect

import com.example.network.statistic.db.Db
import com.example.network.statistic.domian.UseCase
import com.example.network.statistic.models.malware.MalwareResult
import org.jetbrains.exposed.sql.*
import org.jetbrains.exposed.sql.transactions.transaction
import java.lang.StringBuilder

class AddMalwareUseCase(val user: String, val result: ArrayList<MalwareResult>) : UseCase<Unit>() {

    override fun execute() {
        if (result.isEmpty()) return
        val malwareApps = StringBuilder()
        result.forEach { malwareApps.append(":${it.packageId}") }
        val condition = Op.build {
            (Db.AppMalware2.userId eq user) and
                    (Db.AppMalware2.timestamp eq result[0].time)
        }
        val existedUserID = transaction {
            Db.AppMalware2.select(condition).singleOrNull()
        }?.getOrNull(
            Db.AppMalware2.userId
        )
        if (existedUserID == null) {
            transaction {
                Db.AppMalware2.insert {
                    it[userId] = user
                    it[timestamp] = result[0].time
                    it[data] = malwareApps.toString()
                }
            }
        } else {
            transaction {
                Db.AppMalware2.update( {condition}) {
                    it[data] = malwareApps.toString()
                }
            }
        }
    }
}