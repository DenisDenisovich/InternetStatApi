package com.example.network.statistic.domian.malwaredetect

import com.example.network.statistic.db.Db
import com.example.network.statistic.domian.UseCase
import com.example.network.statistic.models.MalwareResult
import org.jetbrains.exposed.sql.Op
import org.jetbrains.exposed.sql.SortOrder
import org.jetbrains.exposed.sql.select
import org.jetbrains.exposed.sql.transactions.transaction

class AddMalwareSearchResultUseCase(val userId: String, val result: ArrayList<MalwareResult>) : UseCase<Unit>() {

    override fun execute() {
        val condition = Op.build {
            (Db.AppMalware2.userId eq userId)
        }
        transaction {
            Db.AppMalware2
                .select(condition)
                .orderBy(Db.AppMalware2.timestamp to SortOrder.ASC)
                .forEach { row ->
                    println(row)
                }
        }
    }
}