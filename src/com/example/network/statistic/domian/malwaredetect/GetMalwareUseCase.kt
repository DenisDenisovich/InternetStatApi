package com.example.network.statistic.domian.malwaredetect

import com.example.network.statistic.db.Db
import com.example.network.statistic.domian.UseCase
import org.jetbrains.exposed.sql.Op
import org.jetbrains.exposed.sql.and
import org.jetbrains.exposed.sql.select
import org.jetbrains.exposed.sql.transactions.transaction

class GetMalwareUseCase(val user: String, val time: Long) : UseCase<ArrayList<String>>() {

    override fun execute(): ArrayList<String> {
        val condition = Op.build {
            (Db.AppMalware2.userId eq user) and
                    (Db.AppMalware2.timestamp eq time)
        }
        val malwareApps = transaction {
            Db.AppMalware2
                .select(condition)
                .lastOrNull()
                ?.getOrNull(Db.AppMalware2.data)
        }
        return ArrayList(malwareApps?.split(":")?.filter { it.isNotEmpty() } ?: arrayListOf())
    }
}