package com.example.network.statistic.domian.malwaredetect

import com.example.network.statistic.db.Db
import com.example.network.statistic.db.Db.AppMalware2.data
import com.example.network.statistic.db.Db.AppMalware2.timestamp
import com.example.network.statistic.domian.UseCase
import com.example.network.statistic.models.malware.MalwareRequest
import org.jetbrains.exposed.sql.Op
import org.jetbrains.exposed.sql.SortOrder
import org.jetbrains.exposed.sql.select
import org.jetbrains.exposed.sql.transactions.transaction

class GetAllMalwareUseCase(val user: String): UseCase<ArrayList<MalwareRequest>>() {

    override fun execute(): ArrayList<MalwareRequest> {
        val condition = Op.build {
            (Db.AppMalware2.userId eq user)
        }
        val result = arrayListOf<MalwareRequest>()
        transaction {
            Db.AppMalware2
                .select(condition)
                .orderBy(timestamp to SortOrder.ASC)
                .forEach {row ->
                    val dataApps = ArrayList(row[data]?.split(":")?.filter { it.isNotEmpty() } ?: arrayListOf())
                    result.add(MalwareRequest(user, row[timestamp], dataApps))
                }
        }
        return result
    }
}